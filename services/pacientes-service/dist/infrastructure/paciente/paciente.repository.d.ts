import { DatabasePool } from 'slonik';
import { PacienteRepositoryPort, FindPacientesParams } from './paciente.repository.port';
import { PacienteMapper } from './paciente.mapper';
import { PacienteEntity } from '../../domain/paciente';
import { SqlRepositoryBase } from '@odoonto7/shared';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { PacienteModel } from './paciente.schema';
export declare class PacienteRepository extends SqlRepositoryBase<PacienteEntity, PacienteModel> implements PacienteRepositoryPort {
    protected tableName: string;
    protected schema: import("zod").ZodObject<{
        id: import("zod").ZodString;
        createdAt: import("zod").ZodEffects<import("zod").ZodDate, Date, unknown>;
        updatedAt: import("zod").ZodEffects<import("zod").ZodDate, Date, unknown>;
        nombre: import("zod").ZodString;
        apellidos: import("zod").ZodString;
        edad: import("zod").ZodNumber;
        sexo: import("zod").ZodNativeEnum<typeof import("../../domain/paciente").Sexo>;
        telefono: import("zod").ZodString;
        email: import("zod").ZodString;
        alergias: import("zod").ZodOptional<import("zod").ZodString>;
        notas: import("zod").ZodOptional<import("zod").ZodString>;
        medicacion: import("zod").ZodOptional<import("zod").ZodString>;
        patologiasMedicas: import("zod").ZodOptional<import("zod").ZodString>;
        embarazada: import("zod").ZodNullable<import("zod").ZodBoolean>;
        hemorragiasDentales: import("zod").ZodBoolean;
        country: import("zod").ZodString;
        postalCode: import("zod").ZodString;
        street: import("zod").ZodString;
    }, "strip", import("zod").ZodTypeAny, {
        nombre?: string;
        apellidos?: string;
        edad?: number;
        sexo?: import("../../domain/paciente").Sexo;
        telefono?: string;
        email?: string;
        alergias?: string;
        notas?: string;
        medicacion?: string;
        patologiasMedicas?: string;
        embarazada?: boolean;
        hemorragiasDentales?: boolean;
        id?: string;
        country?: string;
        postalCode?: string;
        street?: string;
        createdAt?: Date;
        updatedAt?: Date;
    }, {
        nombre?: string;
        apellidos?: string;
        edad?: number;
        sexo?: import("../../domain/paciente").Sexo;
        telefono?: string;
        email?: string;
        alergias?: string;
        notas?: string;
        medicacion?: string;
        patologiasMedicas?: string;
        embarazada?: boolean;
        hemorragiasDentales?: boolean;
        id?: string;
        country?: string;
        postalCode?: string;
        street?: string;
        createdAt?: unknown;
        updatedAt?: unknown;
    }>;
    constructor(pool: DatabasePool, mapper: PacienteMapper, eventEmitter: EventEmitter2);
    findWithFilters(params: FindPacientesParams): Promise<PacienteEntity[]>;
}
