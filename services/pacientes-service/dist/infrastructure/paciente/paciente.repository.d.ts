import { DatabasePool } from 'slonik';
import { PacienteRepositoryPort } from './paciente.repository.port';
import { z } from 'zod';
import { PacienteMapper } from './paciente.mapper';
import { PacienteEntity, Sexo } from '../../domain/paciente';
import { SqlRepositoryBase } from '@odoonto7/shared';
import { EventEmitter2 } from '@nestjs/event-emitter';
export declare const pacienteSchema: z.ZodObject<{
    id: z.ZodString;
    createdAt: z.ZodEffects<z.ZodDate, Date, unknown>;
    updatedAt: z.ZodEffects<z.ZodDate, Date, unknown>;
    nombre: z.ZodString;
    apellidos: z.ZodString;
    edad: z.ZodNumber;
    sexo: z.ZodNativeEnum<typeof Sexo>;
    telefono: z.ZodString;
    email: z.ZodString;
    alergias: z.ZodOptional<z.ZodString>;
    notas: z.ZodOptional<z.ZodString>;
    medicacion: z.ZodOptional<z.ZodString>;
    patologiasMedicas: z.ZodOptional<z.ZodString>;
    embarazada: z.ZodNullable<z.ZodBoolean>;
    hemorragiasDentales: z.ZodBoolean;
    country: z.ZodString;
    postalCode: z.ZodString;
    street: z.ZodString;
}, "strip", z.ZodTypeAny, {
    country?: string;
    postalCode?: string;
    street?: string;
    email?: string;
    nombre?: string;
    apellidos?: string;
    edad?: number;
    sexo?: Sexo;
    telefono?: string;
    alergias?: string;
    notas?: string;
    medicacion?: string;
    patologiasMedicas?: string;
    embarazada?: boolean;
    hemorragiasDentales?: boolean;
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
}, {
    country?: string;
    postalCode?: string;
    street?: string;
    email?: string;
    nombre?: string;
    apellidos?: string;
    edad?: number;
    sexo?: Sexo;
    telefono?: string;
    alergias?: string;
    notas?: string;
    medicacion?: string;
    patologiasMedicas?: string;
    embarazada?: boolean;
    hemorragiasDentales?: boolean;
    id?: string;
    createdAt?: unknown;
    updatedAt?: unknown;
}>;
export type PacienteModel = z.TypeOf<typeof pacienteSchema>;
export declare class PacienteRepository extends SqlRepositoryBase<PacienteEntity, PacienteModel> implements PacienteRepositoryPort {
    protected tableName: string;
    protected schema: z.ZodObject<{
        id: z.ZodString;
        createdAt: z.ZodEffects<z.ZodDate, Date, unknown>;
        updatedAt: z.ZodEffects<z.ZodDate, Date, unknown>;
        nombre: z.ZodString;
        apellidos: z.ZodString;
        edad: z.ZodNumber;
        sexo: z.ZodNativeEnum<typeof Sexo>;
        telefono: z.ZodString;
        email: z.ZodString;
        alergias: z.ZodOptional<z.ZodString>;
        notas: z.ZodOptional<z.ZodString>;
        medicacion: z.ZodOptional<z.ZodString>;
        patologiasMedicas: z.ZodOptional<z.ZodString>;
        embarazada: z.ZodNullable<z.ZodBoolean>;
        hemorragiasDentales: z.ZodBoolean;
        country: z.ZodString;
        postalCode: z.ZodString;
        street: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        country?: string;
        postalCode?: string;
        street?: string;
        email?: string;
        nombre?: string;
        apellidos?: string;
        edad?: number;
        sexo?: Sexo;
        telefono?: string;
        alergias?: string;
        notas?: string;
        medicacion?: string;
        patologiasMedicas?: string;
        embarazada?: boolean;
        hemorragiasDentales?: boolean;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
    }, {
        country?: string;
        postalCode?: string;
        street?: string;
        email?: string;
        nombre?: string;
        apellidos?: string;
        edad?: number;
        sexo?: Sexo;
        telefono?: string;
        alergias?: string;
        notas?: string;
        medicacion?: string;
        patologiasMedicas?: string;
        embarazada?: boolean;
        hemorragiasDentales?: boolean;
        id?: string;
        createdAt?: unknown;
        updatedAt?: unknown;
    }>;
    constructor(pool: DatabasePool, mapper: PacienteMapper, eventEmitter: EventEmitter2);
    updateAddress(paciente: PacienteEntity): Promise<void>;
    findOneByEmail(email: string): Promise<PacienteEntity | null>;
    findOneByTelefono(telefono: string): Promise<PacienteEntity | null>;
}
