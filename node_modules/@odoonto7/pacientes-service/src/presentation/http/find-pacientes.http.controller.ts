import { Body, Controller, Get, HttpStatus, Query } from '@nestjs/common';
import { routesV1 } from '../../config/app.routes';
import { QueryBus } from '@nestjs/cqrs';
import { ApiOperation, ApiResponse } from '@nestjs/swagger';
import { Result } from 'oxide.ts';
import { FindPacientesRequestDto } from './queries/find-pacientes.request.dto';
import { FindPacientesQuery } from '../../application/paciente/queries/find-pacientes/find-pacientes.query-handler';
import { Paginated } from '@odoonto7/shared';
import { PacientePaginatedResponseDto } from './dtos/paciente.paginated.response.dto';
import { PaginatedQueryRequestDto } from '@odoonto7/shared';
import { PacienteResponseDto } from './dtos/paciente.response.dto';
import { PacienteMapper } from '../../infrastructure/paciente/paciente.mapper';
import { PacienteEntity } from '../../domain/paciente';

@Controller(routesV1.version)
export class FindPacientesHttpController {
  constructor(
    private readonly queryBus: QueryBus,
    private readonly mapper: PacienteMapper,
  ) {}

  @Get(routesV1.pacientes.root)
  @ApiOperation({ summary: 'Find pacientes' })
  @ApiResponse({
    status: HttpStatus.OK,
    type: PacientePaginatedResponseDto,
  })
  async findPacientes(
    @Body() request: FindPacientesRequestDto,
    @Query() queryParams: PaginatedQueryRequestDto,
  ): Promise<PacientePaginatedResponseDto> {
    const query = new FindPacientesQuery({
      ...request,
      limit: queryParams?.limit,
      page: queryParams?.page,
    });
    const result: Result<
      Paginated<PacienteEntity>,
      Error
    > = await this.queryBus.execute(query);

    const paginated = result.unwrap();

    return new PacientePaginatedResponseDto({
      ...paginated,
      data: paginated.data.map((paciente) => this.mapper.toResponse(paciente)),
    });
  }
}



